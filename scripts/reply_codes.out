void Client::reply(ReplyCode replyCode, std::string arg1, std::string arg2, std::string arg3, std::string arg4) const
{
	switch (replyCode)
	{
	case RPL_WELCOME:
		return reply(replyCode, ":Welcome to the " + arg1 + " Network, " + arg2 + "[!" + arg3 + "@" + arg4 + "]");
	case RPL_YOURHOST:
		return reply(replyCode, ":Your host is " + arg1 + ", running version " + arg2);
	case RPL_CREATED:
		return reply(replyCode, ":This server was created on " + arg1);
	case RPL_STATSCOMMANDS:
		return reply(replyCode, arg1 + " " + arg2);
	case RPL_STATSCLINE:
		return reply(replyCode, "C " + arg1 + " * " + arg2 + " " + arg3 + " " + arg4);
	case RPL_STATSNLINE:
		return reply(replyCode, "N " + arg1 + " * " + arg2 + " " + arg3 + " " + arg4);
	case RPL_STATSILINE:
		return reply(replyCode, "I " + arg1 + " * " + arg2 + " " + arg3 + " " + arg4);
	case RPL_STATSKLINE:
		return reply(replyCode, "K " + arg1 + " * " + arg2 + " " + arg3 + " " + arg4);
	case RPL_STATSYLINE:
		return reply(replyCode, "Y " + arg1 + " " + arg2 + " " + arg3 + " " + arg4);
	case RPL_ENDOFSTATS:
		return reply(replyCode, arg1 + " :End of /STATS report");
	case RPL_UMODEIS:
		return reply(replyCode, arg1);
	case RPL_STATSLLINE:
		return reply(replyCode, "L " + arg1 + " * " + arg2 + " " + arg3);
	case RPL_STATSUPTIME:
		return reply(replyCode, ":Server Up " + arg1 + " days " + arg2 + ":" + arg3 + ":" + arg4);
	case RPL_STATSOLINE:
		return reply(replyCode, "O " + arg1 + " * " + arg2);
	case RPL_STATSHLINE:
		return reply(replyCode, "H " + arg1 + " * " + arg2);
	case RPL_LUSERCLIENT:
		return reply(replyCode, ":There are " + arg1 + " users and " + arg2 + " invisible on " + arg3 + " servers");
	case RPL_LUSEROP:
		return reply(replyCode, arg1 + " :operator(s) online");
	case RPL_LUSERUNKNOWN:
		return reply(replyCode, arg1 + " :unknown connection(s)");
	case RPL_LUSERCHANNELS:
		return reply(replyCode, arg1 + " :channels formed");
	case RPL_LUSERME:
		return reply(replyCode, ":I have " + arg1 + " clients and " + arg2 + " servers");
	case RPL_ADMINME:
		return reply(replyCode, arg1 + " :Administrative info");
	case RPL_ADMINEMAIL:
		return reply(replyCode, ":" + arg1);
	case RPL_TRACELOG:
		return reply(replyCode, "File " + arg1 + " " + arg2);
	case RPL_NONE:
		return reply(replyCode, "n/a");
	case RPL_AWAY:
		return reply(replyCode, arg1 + " :" + arg2);
	case RPL_UNAWAY:
		return reply(replyCode, ":You are no longer marked as being away");
	case RPL_NOWAWAY:
		return reply(replyCode, ":You have been marked as being away");
	case RPL_WHOISUSER:
		return reply(replyCode, arg1 + " " + arg2 + " " + arg3 + " * :" + arg4);
	case RPL_WHOISSERVER:
		return reply(replyCode, arg1 + " " + arg2 + " :" + arg3);
	case RPL_WHOISOPERATOR:
		return reply(replyCode, arg1 + " :is an IRC operator");
	case RPL_WHOWASUSER:
		return reply(replyCode, arg1 + " " + arg2 + " " + arg3 + " * :" + arg4);
	case RPL_ENDOFWHO:
		return reply(replyCode, arg1 + " :End of /WHO list");
	case RPL_WHOISIDLE:
		return reply(replyCode, arg1 + " " + arg2 + " :seconds idle");
	case RPL_ENDOFWHOIS:
		return reply(replyCode, arg1 + " :End of /WHOIS list");
	case RPL_LISTSTART:
		return reply(replyCode, "Channel :Users Name");
	case RPL_LIST:
		return reply(replyCode, arg1 + " " + arg2 + " :" + arg3);
	case RPL_LISTEND:
		return reply(replyCode, ":End of /LIST");
	case RPL_CHANNELMODEIS:
		return reply(replyCode, arg1 + " " + arg2 + " " + arg3);
	case RPL_NOTOPIC:
		return reply(replyCode, arg1 + " :No topic is set");
	case RPL_TOPIC:
		return reply(replyCode, arg1 + " :" + arg2);
	case RPL_INVITING:
		return reply(replyCode, arg1 + " " + arg2);
	case RPL_SUMMONING:
		return reply(replyCode, arg1 + " :Summoning user to IRC");
	case RPL_VERSION:
		return reply(replyCode, arg1 + " " + arg2 + " :" + arg3);
	case RPL_LINKS:
		return reply(replyCode, arg1 + " " + arg2 + " :" + arg3 + " " + arg4);
	case RPL_ENDOFLINKS:
		return reply(replyCode, arg1 + " :End of /LINKS list");
	case RPL_ENDOFNAMES:
		return reply(replyCode, arg1 + " :End of /NAMES list");
	case RPL_BANLIST:
		return reply(replyCode, arg1 + " " + arg2);
	case RPL_ENDOFBANLIST:
		return reply(replyCode, arg1 + " :End of channel ban list");
	case RPL_ENDOFWHOWAS:
		return reply(replyCode, arg1 + " :End of WHOWAS");
	case RPL_INFO:
		return reply(replyCode, ":" + arg1);
	case RPL_MOTD:
		return reply(replyCode, ":- " + arg1);
	case RPL_ENDOFINFO:
		return reply(replyCode, ":End of /INFO list");
	case RPL_MOTDSTART:
		return reply(replyCode, ":- " + arg1 + " Message of the day -");
	case RPL_ENDOFMOTD:
		return reply(replyCode, ":End of /MOTD command");
	case RPL_YOUREOPER:
		return reply(replyCode, ":You are now an IRC operator");
	case RPL_REHASHING:
		return reply(replyCode, arg1 + " :Rehashing");
	case RPL_TIME:
		return reply(replyCode, arg1 + " :" + arg2);
	case RPL_USERSSTART:
		return reply(replyCode, ":UserID Terminal Host");
	case RPL_ENDOFUSERS:
		return reply(replyCode, ":End of users");
	case RPL_NOUSERS:
		return reply(replyCode, ":Nobody logged in");
	case ERR_NOSUCHNICK:
		return reply(replyCode, arg1 + " :No such nick/channel");
	case ERR_NOSUCHSERVER:
		return reply(replyCode, arg1 + " :No such server");
	case ERR_NOSUCHCHANNEL:
		return reply(replyCode, arg1 + " :No such channel");
	case ERR_CANNOTSENDTOCHAN:
		return reply(replyCode, arg1 + " :Cannot send to channel");
	case ERR_TOOMANYCHANNELS:
		return reply(replyCode, arg1 + " :You have joined too many channels");
	case ERR_WASNOSUCHNICK:
		return reply(replyCode, arg1 + " :There was no such nickname");
	case ERR_TOOMANYTARGETS:
		return reply(replyCode, arg1 + " :Duplicate recipients. No message delivered");
	case ERR_NOORIGIN:
		return reply(replyCode, ":No origin specified");
	case ERR_NORECIPIENT:
		return reply(replyCode, ":No recipient given (" + arg1 + ")");
	case ERR_NOTEXTTOSEND:
		return reply(replyCode, ":No text to send");
	case ERR_WILDTOPLEVEL:
		return reply(replyCode, arg1 + " :Wildcard in toplevel domain");
	case ERR_UNKNOWNCOMMAND:
		return reply(replyCode, arg1 + " :Unknown command");
	case ERR_NOMOTD:
		return reply(replyCode, ":MOTD File is missing");
	case ERR_NOADMININFO:
		return reply(replyCode, arg1 + " :No administrative info available");
	case ERR_FILEERROR:
		return reply(replyCode, ":File error doing " + arg1 + " on " + arg2);
	case ERR_NONICKNAMEGIVEN:
		return reply(replyCode, ":No nickname given");
	case ERR_ERRONEUSNICKNAME:
		return reply(replyCode, arg1 + " :Erroneus nickname");
	case ERR_NICKNAMEINUSE:
		return reply(replyCode, arg1 + " :Nickname is already in use");
	case ERR_NICKCOLLISION:
		return reply(replyCode, arg1 + " :Nickname collision KILL");
	case ERR_USERNOTINCHANNEL:
		return reply(replyCode, arg1 + " " + arg2 + " :They aren't on that channel");
	case ERR_NOTONCHANNEL:
		return reply(replyCode, arg1 + " :You're not on that channel");
	case ERR_USERONCHANNEL:
		return reply(replyCode, arg1 + " " + arg2 + " :is already on channel");
	case ERR_NOLOGIN:
		return reply(replyCode, arg1 + " :User not logged in");
	case ERR_SUMMONDISABLED:
		return reply(replyCode, ":SUMMON has been disabled");
	case ERR_USERSDISABLED:
		return reply(replyCode, ":USERS has been disabled");
	case ERR_NOTREGISTERED:
		return reply(replyCode, ":You have not registered");
	case ERR_NEEDMOREPARAMS:
		return reply(replyCode, arg1 + " :Not enough parameters");
	case ERR_ALREADYREGISTRED:
		return reply(replyCode, ":You may not reregister");
	case ERR_NOPERMFORHOST:
		return reply(replyCode, ":Your host isn't among the privileged");
	case ERR_PASSWDMISMATCH:
		return reply(replyCode, ":Password incorrect");
	case ERR_YOUREBANNEDCREEP:
		return reply(replyCode, ":You are banned from this server");
	case ERR_KEYSET:
		return reply(replyCode, arg1 + " :Channel key already set");
	case ERR_CHANNELISFULL:
		return reply(replyCode, arg1 + " :Cannot join channel (+l)");
	case ERR_UNKNOWNMODE:
		return reply(replyCode, arg1 + " :is unknown mode char to me");
	case ERR_INVITEONLYCHAN:
		return reply(replyCode, arg1 + " :Cannot join channel (+i)");
	case ERR_BANNEDFROMCHAN:
		return reply(replyCode, arg1 + " :Cannot join channel (+b)");
	case ERR_BADCHANNELKEY:
		return reply(replyCode, arg1 + " :Cannot join channel (+k)");
	case ERR_BADCHANMASK:
		return reply(replyCode, arg1 + " :Bad Channel Mask");
	case ERR_NOPRIVILEGES:
		return reply(replyCode, ":Permission Denied- You're not an IRC operator");
	case ERR_CHANOPRIVSNEEDED:
		return reply(replyCode, arg1 + " :You're not channel operator");
	case ERR_CANTKILLSERVER:
		return reply(replyCode, ":You cant kill a server!");
	case ERR_NOOPERHOST:
		return reply(replyCode, ":No O-lines for your host");
	case ERR_UMODEUNKNOWNFLAG:
		return reply(replyCode, ":Unknown MODE flag");
	case ERR_USERSDONTMATCH:
		return reply(replyCode, ":Cant change mode for other users");
	default:
		exit(OUTSTANDING_ERROR);
	}
}
